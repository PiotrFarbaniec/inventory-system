
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0/userguide/building_java_projects.html
 */

buildscript {
    ext {
        groovyVer = '3.0.13'
        spockCoreVer = '2.2-groovy-3.0'
        junitVer = '4.13.2'
        jupiterApiVer = '5.8.2'
        guavaVer = '33.2.1-jre'
        lombokVer = '1.18.30'
        jacksonVersion = '2.17.1'
        postgresDriverVersion = '42.7.3'
    }
}


plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'jacoco'

    id 'checkstyle'

    id 'org.springframework.boot' version '3.3.2'

    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for Spock testing
    testImplementation "org.codehaus.groovy:groovy:${groovyVer}"

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation "org.spockframework:spock-core:${spockCoreVer}"
    testImplementation "junit:junit:${junitVer}"

    // This dependency is used by the application.
    implementation "com.google.guava:guava:${guavaVer}"

    // Dependencies used by the Project Lombok
    compileOnly "org.projectlombok:lombok:${lombokVer}"
    testCompileOnly "org.projectlombok:lombok:${lombokVer}"
    annotationProcessor "org.projectlombok:lombok:${lombokVer}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVer}"

    // Dependencies used for (de)serialisation (from)to JSON format
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}" //for an Optional obj (de)serialisation
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    //PostgreSQL JDBC driver
    implementation "org.postgresql:postgresql:${postgresDriverVersion}"

    //Spring Boot
    implementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.spockframework:spock-spring:${spockCoreVer}"
    implementation 'org.springframework.boot:spring-boot-autoconfigure:3.3.2'

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ORACLE
    }
}

application {
    mainClass = 'pl.inventory.system.InventoryApplication'
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}


test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification

// added line
//    testLogging {
//        events "passed", "skipped", "failed"
//    }
}

jacocoTestReport {
    dependsOn test
}

jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.00
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.00
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: 'src/main/java/pl/inventory/system/InventoryApplication.class')
    }))
    }

}

startScripts {
    dependsOn bootJar
}
